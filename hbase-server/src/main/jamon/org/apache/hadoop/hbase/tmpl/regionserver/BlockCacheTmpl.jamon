<%doc>
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

Template for rendering Block Cache tabs in RegionServer Status page.
</%doc>
<%args>
CacheConfig cacheConfig;
Configuration config;
BlockCache bc;
</%args>
<%java>
  String bcUrl = bc == null ? null : "http://hbase.apache.org/devapidocs/" + bc.getClass().getName().replaceAll("\\.", "/") + ".html";
  String bcName = bc == null ? null : bc.getClass().getSimpleName();
  BlockCache [] bcs = bc == null ? null : bc.getBlockCaches();
  boolean evictions = bcs != null && bcs.length > 1;
</%java>
<%import>
java.util.Map;
org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.CachedBlocksByFile;
org.apache.hadoop.hbase.io.hfile.AgeSnapshot;
org.apache.hadoop.hbase.io.hfile.CachedBlock;
org.apache.hadoop.conf.Configuration;
org.apache.hadoop.hbase.io.hfile.CacheConfig;
org.apache.hadoop.hbase.io.hfile.BlockCache;
org.apache.hadoop.hbase.io.hfile.bucket.BucketCacheStats;
org.apache.hadoop.hbase.io.hfile.bucket.BucketCache;
org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator;
org.apache.hadoop.hbase.io.hfile.bucket.BucketAllocator.Bucket;
org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
</%import>
<div class="tabbable">
    <ul class="nav nav-pills">
        <li class="active"><a href="#tab_bc_baseInfo" data-toggle="tab">Base Info</a></li>
        <li class=""><a href="#tab_bc_config" data-toggle="tab">Config</a></li>
        <li class=""><a href="#tab_bc_stats" data-toggle="tab">Stats</a></li>
        <li class=""><a href="#tab_bc_l1" data-toggle="tab">L1</a></li>
        <li class=""><a href="#tab_bc_l2" data-toggle="tab">L2</a></li>
    </ul>
    <div class="tab-content" style="padding-bottom: 9px; border-bottom: 1px solid #ddd;">
        <div class="tab-pane active" id="tab_bc_baseInfo">
            <& bc_baseInfo; bc = bc; bcUrl = bcUrl; bcName = bcName;  &>
        </div>
        <div class="tab-pane" id="tab_bc_config">
            <& bc_config; cacheConfig = cacheConfig &>
        </div>
        <div class="tab-pane" id="tab_bc_stats">
            <& bc_stats; bc = bc &>
        </div>
        <div class="tab-pane" id="tab_bc_l1">
            <& bc_l; bc = bcs == null? bc: bcs[0]; name = "L1"; evictions = evictions; &>
        </div>
        <div class="tab-pane" id="tab_bc_l2">
            <& bc_l; bc = bcs == null? null: bcs.length <= 1? null: bcs[1]; name = "L2"; evictions = evictions; &>
        </div>
    </div>
</div>

<%def bc_baseInfo>
<%args>
    BlockCache bc;
    String bcUrl;
    String bcName;
</%args>
<%java>
  BlockCache [] bcs = bc == null? null: bc.getBlockCaches();
  String bcl1Url = null;
  String bcl1Name = null;
  String bcl2Url = null;
  String bcl2Name = null;
  if (bcs != null) {
    BlockCache bcl1 = bcs[0];
    if (bcl1 != null) {
      bcl1Url = "http://hbase.apache.org/devapidocs/" + bcl1.getClass().getName().replaceAll("\\.", "/") + ".html";
      bcl1Name = bcl1.getClass().getSimpleName();
    }
    if (bcs.length == 2) {
      BlockCache bcl2 = bcs[1];
      bcl2Url = "http://hbase.apache.org/devapidocs/" + bcl2.getClass().getName().replaceAll("\\.", "/") + ".html";
      bcl2Name = bcl2.getClass().getSimpleName();
    }
  }
</%java>
<table class="table table-striped">
    <tr>
        <th>Attribute</th>
        <th>Value</th>
        <th>Description</th>
    </tr>
    </tr>
    <tr>
        <td>Implementation</td>
        <td><a href="<% bcUrl %>"><% bcName %></a></td>
        <td>Block cache implementing class</td>
    </tr>
</table>
<p>See <a href="http://hbase.apache.org/book.html#block.cache">block cache</a> in the HBase Reference Guide for help.</p>
</%def>

<%def bc_config>
<%args>
    CacheConfig cacheConfig;
</%args>
<%if cacheConfig == null %>
<p>CacheConfig is null</p>
<%else>
<table class="table table-striped">
    <tr>
        <th>Attribute</th>
        <th>Value</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>Cache DATA on Read</td>
        <td><% cacheConfig.shouldCacheDataOnRead() %></td>
        <td>True if DATA blocks are cached on read
        (INDEX & BLOOM blocks are always cached)</td>
    </tr>
    <tr>
        <td>Cache DATA on Write</td>
        <td><% cacheConfig.shouldCacheDataOnWrite() %></td>
        <td>True if DATA blocks are cached on write.</td>
    </tr>
    <tr>
        <td>Cache INDEX on Write</td>
        <td><% cacheConfig.shouldCacheIndexesOnWrite() %></td>
        <td>True if INDEX blocks are cached on write</td>
    </tr>
    <tr>
        <td>Cache BLOOM on Write</td>
        <td><% cacheConfig.shouldCacheBloomsOnWrite() %></td>
        <td>True if BLOOM blocks are cached on write</td>
    </tr>
    <tr>
        <td>Evict blocks on Close</td>
        <td><% cacheConfig.shouldEvictOnClose() %></td>
        <td>True if blocks are evicted from cache when an HFile
        reader is closed</td>
    </tr>
    <tr>
        <td>Cache DATA in compressed format</td>
        <td><% cacheConfig.shouldCacheDataCompressed() %></td>
        <td>True if DATA blocks are cached in their compressed form</td>
    </tr>
    <tr>
        <td>Prefetch on Open</td>
        <td><% cacheConfig.shouldPrefetchOnOpen() %></td>
        <td>True if blocks are prefetched into cache on open</td>
    </tr>
</table>
</%if>
</%def>

<%def evictions_tmpl>
<%args>
    BlockCache bc;
</%args>
<%java>
  AgeSnapshot ageAtEvictionSnapshot = bc.getStats().getAgeAtEvictionSnapshot();
  // Only show if non-zero mean and stddev as is the case in combinedblockcache
</%java>
    <tr>
        <td>Evicted</td>
        <td><% String.format("%,d", bc.getStats().getEvictedCount()) %></td>
        <td>The total number of blocks evicted</td>
    </tr>
    <tr>
        <td>Evictions</td>
        <td><% String.format("%,d", bc.getStats().getEvictionCount()) %></td>
        <td>The total number of times an eviction has occurred</td>
    </tr>
    <tr>
        <td>Mean</td>
        <td><% String.format("%,d", (long)ageAtEvictionSnapshot.getMean()) %></td>
        <td>Mean age of Blocks at eviction time (seconds)</td>
    </tr>
</%def>

<%def hits_tmpl>
<%args>
    BlockCache bc;
</%args>
    <tr>
        <td>Hits</td>
        <td><% String.format("%,d", bc.getStats().getHitCount()) %></td>
        <td>Number requests that were cache hits</td>
    </tr>
    <tr>
        <td>Hits Caching</td>
        <td><% String.format("%,d", bc.getStats().getHitCachingCount()) %></td>
        <td>Cache hit block requests but only requests set to cache block if a miss</td>
    </tr>
    <tr>
        <td>Misses</td>
        <td><% String.format("%,d", bc.getStats().getMissCount()) %></td>
        <td>Block requests that were cache misses but set to cache missed blocks</td>
    </tr>
    <tr>
        <td>Misses Caching</td>
        <td><% String.format("%,d", bc.getStats().getMissCount()) %></td>
        <td>Block requests that were cache misses but only requests set to use block cache</td>
    </tr>
    <tr>
        <td>Hit Ratio</td>
        <td><% String.format("%,.2f", bc.getStats().getHitRatio() * 100) %><% "%" %></td>
        <td>Hit Count divided by total requests count</td>
    </tr>

</%def>

<%def bc_stats>
<%args>
    BlockCache bc;
</%args>
<%if bc == null %>
<p>BlockCache is null</p>
<%else>
<table class="table table-striped">
    <tr>
        <th>Attribute</th>
        <th>Value</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>Size</td>
        <td><% TraditionalBinaryPrefix.long2String(bc.getCurrentSize(),
            "B", 1) %></td>
        <td>Current size of block cache in use</td>
    </tr>
    <tr>
        <td>Free</td>
        <td><% TraditionalBinaryPrefix.long2String(bc.getFreeSize(),
            "B", 1) %></td>
        <td>The total free memory currently available to store more cache entries</td>
    </tr>
    <tr>
        <td>Count</td>
        <td><% String.format("%,d", bc.getBlockCount()) %></td>
        <td>Number of blocks in block cache</td>
    </tr>
    <& evictions_tmpl; bc = bc; &>
    <& hits_tmpl; bc = bc; &>
</table>
<p>If block cache is made up of more than one cache -- i.e. a L1 and a L2 -- then the above
are combined counts. Request count is sum of hits and misses.</p>
</%if>
</%def>

<%def bc_l>
<%args>
    BlockCache bc;
    String name;
    boolean evictions;
</%args>
<%if bc == null %>
<p>No <% name %> deployed</p>
<%else>
<& block_cache; bc = bc; name = name; evictions = evictions;  &>
</%if>
</%def>

<%def block_cache>
<%args>
    BlockCache bc;
    String name;
    boolean evictions;
</%args>
<%java>
  String bcUrl = "http://hbase.apache.org/devapidocs/" + bc.getClass().getName().replaceAll("\\.", "/") + ".html";
  String bcName = bc.getClass().getSimpleName();
  org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.CachedBlocksByFile cbsbf =
    org.apache.hadoop.hbase.io.hfile.BlockCacheUtil.getLoadedCachedBlocksByFile(config, bc);
  AgeSnapshot cbsbfSnapshot = cbsbf.getAgeInCacheSnapshot();

  boolean bucketCache = bc.getClass().getSimpleName().equals("BucketCache");
  BucketCacheStats bucketCacheStats = null;
  BucketAllocator bucketAllocator = null;

  if (bucketCache) {
    bucketCacheStats = (BucketCacheStats)bc.getStats();
    bucketAllocator = ((BucketCache)bc).getAllocator();
  }
</%java>
<%if cbsbf.isFull() %>
<p>
<div class="alert alert-danger">
<strong>The stats below are incomplete!</strong> We ran into our accounting limit of <% cbsbf.getCount() %> blocks. Up the configuration <i>hbase.ui.blockcache.by.file.max</i>.
</div>
</p> 
</%if>
<table id="blocks_summary" class="table table-striped">
    <tr>
        <th>Attribute</th>
        <th>Value</th>
        <th>Description</th>
    </tr>
    <tr>
        <td>Implementation</td>
        <td><a href="<% bcUrl %>"><% bc.getClass().getSimpleName() %></a></td>
        <td>Class implementing this block cache Level</td>
    </tr>
<%if bucketCache %>
    <tr>
        <td>Implementation</td>
        <td><% ((BucketCache)bc).getIoEngine() %></a></td>
        <td>IOEngine</td>
    </tr>
</%if>
    <tr>
        <td>Cache Size Limit</td>
        <td><% TraditionalBinaryPrefix.long2String(bc.getMaxSize(), "B", 1) %></td>
        <td>Max size of cache</td>
    </tr>
    <tr>
        <td>Block Count</td>
        <td><% String.format("%,d", bc.getBlockCount()) %></td>
        <td>Count of Blocks</td>
    </tr>
<%if !bucketCache %>
    <tr>
        <td>Data Block Count</td>
        <td><% String.format("%,d", bc.getDataBlockCount()) %></td>
        <td>Count of DATA Blocks</td>
    </tr>
</%if>
    <tr>
        <td>Size of Blocks</td>
        <td><% TraditionalBinaryPrefix.long2String(bc.getCurrentSize(), "B", 1) %></td>
        <td>Size of Blocks</td>
    </tr>
<%if !bucketCache %>
    <tr>
        <td>Size of Data Blocks</td>
        <td><% TraditionalBinaryPrefix.long2String(bc.getCurrentDataSize(), "B", 1) %></td>
        <td>Size of DATA Blocks</td>
    </tr>
</%if> 
<& evictions_tmpl; bc = bc; &>
<& hits_tmpl; bc = bc; &>

<%if bucketCache %>
    <tr>
        <td>Hits per Second</td>
        <td><% bucketCacheStats.getIOHitsPerSecond() %></td>
        <td>Block gets against this cache per second</td>
    </tr>
    <tr>
        <td>Time per Hit</td>
        <td><% bucketCacheStats.getIOTimePerHit() %></td>
        <td>Time per cache hit</td>
    </tr>
</%if>
</table>
<%doc>Call through to block cache Detail rendering template</%doc>
<p>View block cache <a href="?format=json&bcn=<% name %>">as JSON</a> | Block cache <a href="?format=json&bcn=<% name %>&bcv=file">as JSON by file</a></p>
<%java>
cbsbf = null;
</%java>
</%def>

