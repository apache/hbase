<%doc>
Copyright The Apache Software Foundation

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
 </%doc>

<%args>
List<ServerName> servers = null;
HMaster master;
</%args>

<%import>
        java.util.*;
        org.apache.hadoop.hbase.master.HMaster;
        org.apache.hadoop.hbase.procedure2.util.StringUtils;
        org.apache.hadoop.hbase.replication.ReplicationLoadSource;
        org.apache.hadoop.hbase.RegionMetrics;
        org.apache.hadoop.hbase.ServerMetrics;
        org.apache.hadoop.hbase.ServerName;
        org.apache.hadoop.hbase.Size;
        org.apache.hadoop.hbase.util.VersionInfo;
        org.apache.hadoop.hbase.util.Pair;
        org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
        org.apache.hadoop.hbase.net.Address;
        org.apache.hadoop.hbase.rsgroup.RSGroupInfo;
        org.apache.hadoop.hbase.rsgroup.RSGroupUtil;
</%import>

<%if (servers != null && servers.size() > 0)%>

<%java>
ServerName [] serverNames = servers.toArray(new ServerName[servers.size()]);
Arrays.sort(serverNames);
</%java>

<div class="tabbable">
    <ul class="nav nav-pills" role="tablist">
        <li class="nav-item">
          <a class="nav-link active" href="#tab_baseStats" data-bs-toggle="tab" role="tab">Base Stats</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#tab_memoryStats" data-bs-toggle="tab" role="tab">Memory</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#tab_requestStats" data-bs-toggle="tab" role="tab">Requests</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#tab_storeStats" data-bs-toggle="tab" role="tab">Storefiles</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#tab_compactStats" data-bs-toggle="tab" role="tab">Compactions</a>
        </li>
        <li class="nav-item">
          <a class="nav-link" href="#tab_replicationStats" data-bs-toggle="tab" role="tab">Replications</a>
        </li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane active" id="tab_baseStats" role="tabpanel">
            <& baseStats; serverNames = serverNames; &>
        </div>
        <div class="tab-pane" id="tab_memoryStats" role="tabpanel">
            <& memoryStats; serverNames = serverNames; &>
        </div>
        <div class="tab-pane" id="tab_requestStats" role="tabpanel">
            <& requestStats; serverNames = serverNames; &>
        </div>
        <div class="tab-pane" id="tab_storeStats" role="tabpanel">
            <& storeStats; serverNames = serverNames; &>
        </div>
        <div class="tab-pane" id="tab_compactStats" role="tabpanel">
            <& compactionStats; serverNames = serverNames; &>
        </div>
        <div class="tab-pane" id="tab_replicationStats" role="tabpanel">
            <& replicationStats; serverNames = serverNames; &>
        </div>
    </div>
</div>

</%if>

<%def baseStats>
<%args>
        ServerName [] serverNames;
</%args>
<table id="baseStatsTable" class="tablesorter table table-striped">
<thead>
<tr>
    <th>ServerName</th>
    <th>State</th>
    <th class="cls_dateTime">Start time</th>
    <th>Last contact</th>
    <th>Version</th>
    <th class="cls_separator">Requests Per Second</th>
    <th class="cls_separator">Num. Regions</th>
    <%if !master.isInMaintenanceMode() && master.getMasterCoprocessorHost() != null %>
      <%if RSGroupUtil.isRSGroupEnabled(master.getConfiguration()) %>
        <th style="vertical-align: middle;" rowspan="2">RSGroup</th>
      </%if>
    </%if>
</tr>
</thead>
<tbody>
<%java>
    int totalRegions = 0;
    int totalRequestsPerSecond = 0;
    int inconsistentNodeNum = 0;
    String state = "Normal";
    String masterVersion = VersionInfo.getVersion();
    Set<ServerName> decommissionedServers = new HashSet<>(master.listDecommissionedRegionServers());
    String rsGroupName = "default";
    List<RSGroupInfo> groups;
    Map<Address, RSGroupInfo> server2GroupMap = new HashMap<>();
    if (!master.isInMaintenanceMode() && master.getMasterCoprocessorHost() != null
      && RSGroupUtil.isRSGroupEnabled(master.getConfiguration())) {
        groups = master.getRSGroupInfoManager().listRSGroups();
        groups.forEach(group -> {
          group.getServers().forEach(address -> server2GroupMap.put(address, group));
        });
    }
    for (ServerName serverName: serverNames) {
    if (decommissionedServers.contains(serverName)) {
        state = "Decommissioned";
    }
    ServerMetrics sl = master.getServerManager().getLoad(serverName);
    String version = master.getRegionServerVersion(serverName);
    if (!masterVersion.equals(version)) {
        inconsistentNodeNum ++;
    }

    double requestsPerSecond = 0.0;
    int numRegionsOnline = 0;
    long lastContact = 0;

    if (sl != null) {
        requestsPerSecond = sl.getRequestCountPerSecond();
        numRegionsOnline = sl.getRegionMetrics().size();
        totalRegions += sl.getRegionMetrics().size();
        totalRequestsPerSecond += sl.getRequestCountPerSecond();
        lastContact = (System.currentTimeMillis() - sl.getReportTimestamp())/1000;
    }
    long startcode = serverName.getStartcode();
    if (!master.isInMaintenanceMode() && master.getMasterCoprocessorHost() != null
      && RSGroupUtil.isRSGroupEnabled(master.getConfiguration())) {
        rsGroupName = server2GroupMap.get(serverName.getAddress()).getName();
      }
</%java>
<tr>
    <td><& serverNameLink; serverName=serverName; &></td>
    <td><% state %></td>
    <td><% new Date(startcode) %></td>
    <td><% TraditionalBinaryPrefix.long2String(lastContact, "s", 1) %></td>
    <td><% version %></td>
    <td><% String.format("%,.0f", requestsPerSecond) %></td>
    <td><% String.format("%,d", numRegionsOnline) %></td>
    <%if !master.isInMaintenanceMode() && master.getMasterCoprocessorHost() != null %>
      <%if RSGroupUtil.isRSGroupEnabled(master.getConfiguration()) %>
        <td><% rsGroupName %></td>
      </%if>
    </%if>
</tr>
<%java>
}
</%java>
</tbody>
<tr><td>Total:<% servers.size() %></td>
<td></td>
<td></td>
<td></td>
<%if inconsistentNodeNum > 0%>
  <td style="color:red;"><% inconsistentNodeNum %> nodes with inconsistent version</td>
<%else>
   <td></td>
</%if>
<td><% totalRequestsPerSecond %></td>
<td><% totalRegions %></td>
</tr>
</table>
</%def>

<%def memoryStats>
<%args>
    ServerName [] serverNames;
</%args>
<table id="memoryStatsTable" class="tablesorter table table-striped">
<thead>
<tr>
    <th>ServerName</th>
    <th class="cls_filesize">Used Heap</th>
    <th class="cls_filesize">Max Heap</th>
    <th class="cls_filesize">Memstore Size</th>

</tr>
</thead>
<tbody>
<%java>
final String ZEROMB = "0 MB";
for (ServerName serverName: serverNames) {
  String usedHeapStr = ZEROMB;
  String maxHeapStr = ZEROMB;
  String memStoreSizeMBStr = ZEROMB;
  ServerMetrics sl = master.getServerManager().getLoad(serverName);
  if (sl != null) {
    long memStoreSizeMB = 0;
    for (RegionMetrics rl : sl.getRegionMetrics().values()) {
      memStoreSizeMB += rl.getMemStoreSize().get(Size.Unit.MEGABYTE);
    }
    if (memStoreSizeMB > 0) {
      memStoreSizeMBStr = TraditionalBinaryPrefix.long2String(memStoreSizeMB
                                * TraditionalBinaryPrefix.MEGA.value, "B", 1);
    }

    double usedHeapSizeMB = sl.getUsedHeapSize().get(Size.Unit.MEGABYTE);
    if (usedHeapSizeMB > 0) {
      usedHeapStr = TraditionalBinaryPrefix.long2String((long) usedHeapSizeMB
                          * TraditionalBinaryPrefix.MEGA.value, "B", 1);
    }
    double maxHeapSizeMB = sl.getMaxHeapSize().get(Size.Unit.MEGABYTE);
    if (maxHeapSizeMB > 0) {
      maxHeapStr = TraditionalBinaryPrefix.long2String((long) maxHeapSizeMB
                         * TraditionalBinaryPrefix.MEGA.value, "B", 1);
    }
</%java>
<tr>
    <td><& serverNameLink; serverName=serverName; &></td>
    <td><% usedHeapStr %></td>
    <td><% maxHeapStr %></td>
    <td><% memStoreSizeMBStr %></td>
</tr>
<%java>
  } else {
</%java>
<& emptyStat; serverName=serverName; &>
<%java>
  }
}
</%java>
</tbody>
</table>
</%def>


<%def requestStats>
<%args>
        ServerName [] serverNames;
        </%args>
<table id="requestStatsTable" class="tablesorter table table-striped">
<thead>
<tr>
    <th>ServerName</th>
    <th class="cls_separator">Request Per Second</th>
    <th class="cls_separator">Read Request Count</th>
    <th class="cls_separator">Filtered Read Request Count</th>
    <th class="cls_separator">Write Request Count</th>
</tr>
</thead>
<tbody>
<%java>
for (ServerName serverName: serverNames) {

ServerMetrics sl = master.getServerManager().getLoad(serverName);
if (sl != null) {
  long readRequestCount = 0;
  long writeRequestCount = 0;
  long filteredReadRequestCount = 0;
  for (RegionMetrics rl : sl.getRegionMetrics().values()) {
    readRequestCount += rl.getReadRequestCount();
    writeRequestCount += rl.getWriteRequestCount();
    filteredReadRequestCount += rl.getFilteredReadRequestCount();
  }
</%java>
<tr>
<td><& serverNameLink; serverName=serverName; &></td>
<td><% String.format("%,d", sl.getRequestCountPerSecond()) %></td>
<td><% String.format("%,d", readRequestCount) %></td>
<td><% String.format("%,d", filteredReadRequestCount) %></td>
<td><% String.format("%,d", writeRequestCount) %></td>
</tr>
<%java>
        }  else {
        </%java>
<& emptyStat; serverName=serverName; &>
<%java>
        }
}
</%java>
</tbody>
</table>
</%def>


<%def storeStats>
<%args>
        ServerName [] serverNames;
        </%args>
<table id="storeStatsTable" class="tablesorter table table-striped">
<thead>
<tr>
    <th>ServerName</th>
    <th class="cls_separator">Num. Stores</th>
    <th class="cls_separator">Num. Storefiles</th>
    <th class="cls_filesize">Storefile Size Uncompressed</th>
    <th class="cls_filesize">Storefile Size</th>
    <th class="cls_filesize">Index Size</th>
    <th class="cls_filesize">Bloom Size</th>
</tr>
</thead>
<tbody>
<%java>
final String ZEROKB = "0 KB";
final String ZEROMB = "0 MB";
for (ServerName serverName: serverNames) {

  String storeUncompressedSizeMBStr = ZEROMB;
  String storeFileSizeMBStr = ZEROMB;
  String totalStaticIndexSizeKBStr = ZEROKB;
  String totalStaticBloomSizeKBStr = ZEROKB;
  ServerMetrics sl = master.getServerManager().getLoad(serverName);
  if (sl != null) {
    long storeCount = 0;
    long storeFileCount = 0;
    long storeUncompressedSizeMB = 0;
    long storeFileSizeMB = 0;
    long totalStaticIndexSizeKB = 0;
    long totalStaticBloomSizeKB = 0;
    for (RegionMetrics rl : sl.getRegionMetrics().values()) {
      storeCount += rl.getStoreCount();
      storeFileCount += rl.getStoreFileCount();
      storeUncompressedSizeMB += rl.getUncompressedStoreFileSize().get(Size.Unit.MEGABYTE);
      storeFileSizeMB += rl.getStoreFileSize().get(Size.Unit.MEGABYTE);
      totalStaticIndexSizeKB += rl.getStoreFileUncompressedDataIndexSize().get(Size.Unit.KILOBYTE);
      totalStaticBloomSizeKB += rl.getBloomFilterSize().get(Size.Unit.KILOBYTE);
    }
    if (storeUncompressedSizeMB > 0) {
      storeUncompressedSizeMBStr = TraditionalBinaryPrefix.
      long2String(storeUncompressedSizeMB * TraditionalBinaryPrefix.MEGA.value, "B", 1);
    }
    if (storeFileSizeMB > 0) {
      storeFileSizeMBStr = TraditionalBinaryPrefix.
      long2String(storeFileSizeMB * TraditionalBinaryPrefix.MEGA.value, "B", 1);
    }
    if (totalStaticIndexSizeKB > 0) {
      totalStaticIndexSizeKBStr = TraditionalBinaryPrefix.
      long2String(totalStaticIndexSizeKB * TraditionalBinaryPrefix.KILO.value, "B", 1);
    }
    if (totalStaticBloomSizeKB > 0) {
      totalStaticBloomSizeKBStr = TraditionalBinaryPrefix.
      long2String(totalStaticBloomSizeKB * TraditionalBinaryPrefix.KILO.value, "B", 1);
    }
</%java>
<tr>
<td><& serverNameLink; serverName=serverName; &></td>
<td><% String.format("%,d", storeCount) %></td>
<td><% String.format("%,d", storeFileCount) %></td>
<td><% storeUncompressedSizeMBStr %></td>
<td><% storeFileSizeMBStr %></td>
<td><% totalStaticIndexSizeKBStr %></td>
<td><% totalStaticBloomSizeKBStr %></td>
</tr>
<%java>
  } else {
</%java>
<& emptyStat; serverName=serverName; &>
<%java>
  }
}
</%java>
</tbody>
</table>
</%def>

<%def compactionStats>
<%args>
        ServerName [] serverNames;
        </%args>
<table id="compactionStatsTable" class="tablesorter table table-striped">
<thead>
<tr>
    <th>ServerName</th>
    <th class="cls_separator">Num. Compacting Cells</th>
    <th class="cls_separator">Num. Compacted Cells</th>
    <th class="cls_separator">Remaining Cells</th>
    <th>Compaction Progress</th>
</tr>
</thead>
<tbody>
<%java>
for (ServerName serverName: serverNames) {

ServerMetrics sl = master.getServerManager().getLoad(serverName);
if (sl != null) {
long totalCompactingCells = 0;
long totalCompactedCells = 0;
for (RegionMetrics rl : sl.getRegionMetrics().values()) {
  totalCompactingCells += rl.getCompactingCellCount();
  totalCompactedCells += rl.getCompactedCellCount();
}
String percentDone = "";
if  (totalCompactingCells > 0) {
     percentDone = String.format("%.2f", 100 *
        ((float) totalCompactedCells / totalCompactingCells)) + "%";
}
</%java>
<tr>
<td><& serverNameLink; serverName=serverName; &></td>
<td><% String.format("%,d", totalCompactingCells) %></td>
<td><% String.format("%,d", totalCompactedCells) %></td>
<td><% String.format("%,d", totalCompactingCells - totalCompactedCells) %></td>
<td><% percentDone %></td>
</tr>
<%java>
        }  else {
        </%java>
<& emptyStat; serverName=serverName; &>
<%java>
    }
}
</%java>
</tbody>
</table>
</%def>

<%def replicationStats>
<%args>
    ServerName [] serverNames;
</%args>
<%java>
        HashMap<String, List<Pair<ServerName, ReplicationLoadSource>>> replicationLoadSourceMap
            = master.getReplicationLoad(serverNames);
        List<String> peers = null;
        if (replicationLoadSourceMap != null && replicationLoadSourceMap.size() > 0){
            peers = new ArrayList<>(replicationLoadSourceMap.keySet());
            Collections.sort(peers);
        }
</%java>

<%if (replicationLoadSourceMap != null && replicationLoadSourceMap.size() > 0) %>

<div class="tabbable">
    <ul class="nav nav-tabs">
        <%java>
        String active = "active";
        for (String peer : peers){
        </%java>
            <li class=<% active %>><a href="#tab_<% peer %>" data-bs-toggle="tab">Peer <% peer %></a> </li>
        <%java>
        active = "";
        }
        </%java>
    </ul>
    <div class="tab-content">
        <%java>
            active = "active";
            for (String peer : peers){
        </%java>
            <div class="tab-pane <% active %>" id="tab_<% peer %>">
                <table class="table table-striped">
                    <tr>
                        <th>Server</th>
                        <th>AgeOfLastShippedOp</th>
                        <th>SizeOfLogQueue</th>
                        <th>ReplicationLag</th>
                    </tr>

                    <%for Pair<ServerName, ReplicationLoadSource> pair: replicationLoadSourceMap.get(peer) %>
                    <tr>
                        <td><& serverNameLink; serverName=pair.getFirst(); &></td>
                        <td><% StringUtils.humanTimeDiff(pair.getSecond().getAgeOfLastShippedOp()) %></td>
                        <td><% pair.getSecond().getSizeOfLogQueue() %></td>
                        <td><% pair.getSecond().getReplicationLag() == Long.MAX_VALUE ? "UNKNOWN" : StringUtils.humanTimeDiff(pair.getSecond().getReplicationLag()) %></td>
                    </tr>
                    </%for>
        </table>
            </div>
        <%java>
                active = "";
                }
        </%java>
    </div>
    <p>If the replication delay is UNKNOWN, that means this walGroup doesn't start replicate yet and it may get disabled.</p>
</div>
<%else>
    <p>No Peers Metrics</p>
</%if>
</%def>



<%def serverNameLink>
        <%args>
        ServerName serverName;
        </%args>
        <%java>
        int infoPort = master.getRegionServerInfoPort(serverName);
        String url = "//" + serverName.getHostname() + ":" + infoPort + "/rs-status";
        </%java>

        <%if infoPort > 0%>
            <a href="<% url %>"><% serverName.getServerName() %></a>
        <%else>
            <% serverName.getServerName() %>
        </%if>
</%def>

<%def emptyStat>
        <%args>
        ServerName serverName;
        </%args>
    <tr>
    <td><& serverNameLink; serverName=serverName; &></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    <td></td>
    </tr>
</%def>







