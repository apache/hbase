/*
 *
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.replication;

import java.util.Set;
import org.apache.hadoop.hbase.ServerName;
import org.apache.yetus.audience.InterfaceAudience;

/**
 * The replication listener interface can be implemented if a class needs to subscribe to events
 * generated by the ReplicationTracker. These events include things like addition/deletion of peer
 * clusters or failure of a local region server. To receive events, the class also needs to register
 * itself with a Replication Tracker.
 */
@InterfaceAudience.Private
public interface ReplicationListener {

  /**
   * Called when region server list is changed.
   * <p/>
   * Notice that, you could get a regionServerListChanged call when the given {@code regionServers}
   * is still the same comparing to the previous call. This is because that the notification is
   * always asynchronous and then we need to fetch the region server list. And if a region server
   * goes up and down within the interval, we will see an unchanged region server list. But the call
   * is still important to let you know that there is a region server list change in the past, and
   * you need to compare the region server list with the list gotten from other place to determine
   * the change set.
   */
  public void regionServerListChanged(Set<ServerName> regionServers);
}
