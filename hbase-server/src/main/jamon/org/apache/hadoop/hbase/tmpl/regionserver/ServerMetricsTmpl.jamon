<%doc>

Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
</%doc>
<%args>
MetricsRegionServerWrapper mWrap;
MetricsHBaseServerWrapper mServerWrap;
ByteBuffAllocator bbAllocator;
</%args>
<%import>
java.util.*;
org.apache.hadoop.hbase.regionserver.HRegionServer;
org.apache.hadoop.hbase.io.ByteBuffAllocator;
org.apache.hadoop.hbase.ipc.MetricsHBaseServerWrapper;
org.apache.hadoop.hbase.regionserver.MetricsRegionServerWrapper;
org.apache.hadoop.hbase.util.Bytes;
org.apache.hadoop.hbase.HRegionInfo;
org.apache.hadoop.hbase.ServerName;
org.apache.hadoop.hbase.HBaseConfiguration;
org.apache.hadoop.hbase.protobuf.ProtobufUtil;
org.apache.hadoop.hbase.protobuf.generated.AdminProtos.ServerInfo;
org.apache.hadoop.hbase.protobuf.generated.ClusterStatusProtos.RegionLoad;
org.apache.hadoop.hbase.util.DirectMemoryUtils;
org.apache.hadoop.util.StringUtils.TraditionalBinaryPrefix;
java.lang.management.MemoryUsage;
org.apache.hadoop.hbase.io.util.MemorySizeUtil;
</%import>
<div class="tabbable">
    <ul class="nav nav-pills">
        <li class="active"><a href="#tab_baseStats" data-toggle="tab">Base Stats</a></li>
        <li class=""><a href="#tab_memoryStats" data-toggle="tab">Memory</a></li>
        <li class=""><a href="#tab_requestStats" data-toggle="tab">Requests</a></li>
        <li class=""><a href="#tab_walStats" data-toggle="tab">WALs</a></li>
        <li class=""><a href="#tab_storeStats" data-toggle="tab">Storefiles</a></li>
        <li class=""><a href="#tab_queueStats" data-toggle="tab">Queues</a></li>
        <li class=""><a href="#tab_byteBuffAllocatorStats" data-toggle="tab">ByteBuffAllocator Stats</a></li>
    </ul>
    <div class="tab-content" style="padding-bottom: 9px; border-bottom: 1px solid #ddd;">
        <div class="tab-pane active" id="tab_baseStats">
            <& baseStats; mWrap = mWrap &>
        </div>
        <div class="tab-pane" id="tab_memoryStats">
            <& memoryStats; mWrap = mWrap &>
        </div>
        <div class="tab-pane" id="tab_requestStats">
            <& requestStats; mWrap = mWrap &>
        </div>
        <div class="tab-pane" id="tab_walStats">
            <& walStats; mWrap = mWrap &>
        </div>
        <div class="tab-pane" id="tab_storeStats">
            <& storeStats; mWrap = mWrap &>
        </div>
        <div class="tab-pane" id="tab_queueStats">
            <& queueStats; mWrap = mWrap; mServerWrap = mServerWrap; &>
        </div>
        <div class="tab-pane" id="tab_byteBuffAllocatorStats">
            <& byteBuffAllocatorStats; bbAllocator = bbAllocator; &>
        </div>
    </div>
</div>

<%def baseStats>
<%args>
    MetricsRegionServerWrapper mWrap;
</%args>
<table class="table table-striped">
    <tr>

        <th>Requests Per Second</th>
        <th>Num. Regions</th>
        <th>Block locality</th>
        <th>Block locality (Secondary replicas)</th>
        <th>Slow WAL Append Count</th>
    </tr>
    <tr>
        <td><% String.format("%.0f", mWrap.getRequestsPerSecond()) %></td>
        <td><% mWrap.getNumOnlineRegions() %></td>
        <td><% mWrap.getPercentFileLocal() %></td>
        <td><% mWrap.getPercentFileLocalSecondaryRegions() %></td>
        <td><% mWrap.getNumWALSlowAppend() %></td>
    </tr>
</table>
</%def>

<%def memoryStats>
<%args>
MetricsRegionServerWrapper mWrap;
</%args>
<%java
  long usedHeap = -1L;
  long maxHeap = -1L;
  final MemoryUsage usage = MemorySizeUtil.safeGetHeapMemoryUsage();
  if (usage != null) {
    maxHeap = usage.getMax();
    usedHeap = usage.getUsed();
  }
%>
<table class="table table-striped">
<tr>
    <tr>
        <th>Used Heap</th>
        <th>Max Heap</th>
        <th>Direct Memory Used</th>
        <th>Direct Memory Configured</th>
        <th>Memstore Size</th>
        <th>Memstore Limit</th>
    </tr>
</tr>
<tr>
    <td>
        <% TraditionalBinaryPrefix.long2String(usedHeap, "B", 1) %>
    </td>
    <td>
        <% TraditionalBinaryPrefix.long2String(maxHeap, "B", 1) %>
    </td>
    <td>
        <% TraditionalBinaryPrefix.long2String(DirectMemoryUtils.getDirectMemoryUsage(), "B", 1) %>
    </td>
    <td>
        <% TraditionalBinaryPrefix.long2String(DirectMemoryUtils.getDirectMemorySize(), "B", 1) %>
    </td>
    <td>
        <% TraditionalBinaryPrefix.long2String(mWrap.getMemStoreSize(), "B", 1) %>
    </td>
    <td>
        <% TraditionalBinaryPrefix.long2String(mWrap.getMemStoreLimit(), "B", 1) %>
    </td>
</tr>
</table>
</%def>

<%def walStats>
<%args>
MetricsRegionServerWrapper mWrap;
</%args>
<table class="table table-striped">
<tr>
    <tr>
        <th>Num. WAL Files</th>
        <th>Size. WAL Files</th>
    </tr>
</tr>
<tr>
    <td><% mWrap.getNumWALFiles() %></td>
    <td><% TraditionalBinaryPrefix.long2String(mWrap.getWALFileSize(), "B", 1) %></td>
</tr>
</table>
</%def>

<%def storeStats>
<%args>
MetricsRegionServerWrapper mWrap;
</%args>
<table class="table table-striped">
<tr>

    <th>Num. Stores</th>
    <th>Num. Storefiles</th>
    <th>Root Index Size</th>
    <th>Index Size</th>
    <th>Bloom Size</th>
</tr>
<tr>
    <td><% mWrap.getNumStores() %></td>
    <td><% mWrap.getNumStoreFiles() %></td>
    <td><% TraditionalBinaryPrefix.long2String(mWrap.getStoreFileIndexSize(), "B", 1) %></td>
    <td><% TraditionalBinaryPrefix.long2String(mWrap.getTotalStaticIndexSize(), "B", 1) %></td>
    <td><% TraditionalBinaryPrefix.long2String(mWrap.getTotalStaticBloomSize(), "B", 1) %></td>
</tr>
</table>
</%def>


<%def requestStats>
<%args>
MetricsRegionServerWrapper mWrap;
</%args>
<table class="table table-striped">
<tr>
    <th>Request Per Second</th>
    <th>Read Request Count</th>
    <th>Filtered Read Request Count</th>
    <th>Write Request Count</th>
</tr>
<tr>
    <td><% String.format("%.0f", mWrap.getRequestsPerSecond()) %></td>
    <td><% mWrap.getReadRequestsCount() %></td>
    <td><% mWrap.getFilteredReadRequestsCount() %></td>
    <td><% mWrap.getWriteRequestsCount() %></td>
</tr>
</table>
</%def>

<%def queueStats>
<%args>
MetricsRegionServerWrapper mWrap;
MetricsHBaseServerWrapper mServerWrap;
</%args>
<table class="table table-striped">
<tr>
    <th>Compaction Queue Length</th>
    <th>Flush Queue Length</th>
    <th>Priority Call Queue Length</th>
    <th>General Call Queue Length</th>
    <th>Replication Call Queue Length</th>
    <th>Total Call Queue Size</th>

</tr>
<tr>
    <td><% mWrap.getCompactionQueueSize() %></td>
    <td><% mWrap.getFlushQueueSize() %></td>
    <td><% mServerWrap.getPriorityQueueLength() %></td>
    <td><% mServerWrap.getGeneralQueueLength() %></td>
    <td><% mServerWrap.getReplicationQueueLength() %></td>
    <td><% TraditionalBinaryPrefix.long2String(mServerWrap.getTotalQueueSize(), "B", 1) %></td>
</tr>
</table>
</%def>

<%def byteBuffAllocatorStats>
<%args>
ByteBuffAllocator bbAllocator;
</%args>
<table class="table table-striped">
<tr>
    <th>Total Heap Allocation(Bytes)</th>
    <th>Total Pool Allocation(Bytes)</th>
    <th>Heap Allocation Ratio</th>
    <th>Total Buffer Count</th>
    <th>Used Buffer Count</th>
    <th>Buffer Size(Bytes)</th>
</tr>
<tr>
    <td><% bbAllocator.getHeapAllocationBytes() %></td>
    <td><% bbAllocator.getPoolAllocationBytes() %></td>
    <td><% String.format("%.3f", bbAllocator.getHeapAllocationRatio() * 100) %><% "%" %></td>
    <td><% bbAllocator.getTotalBufferCount() %></td>
    <td><% bbAllocator.getUsedBufferCount() %></td>
    <td><% bbAllocator.getBufferSize() %></td>
</tr>
</table>
</%def>
