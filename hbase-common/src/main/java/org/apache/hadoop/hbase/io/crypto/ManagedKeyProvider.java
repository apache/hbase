/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.hadoop.hbase.io.crypto;

import org.apache.hadoop.conf.Configuration;
import org.apache.yetus.audience.InterfaceAudience;
import java.io.IOException;
import java.util.Base64;

/**
 * Interface for key providers of managed keys. Defines methods for generating and managing
 * managed keys, as well as handling key storage and retrieval.
 *
 * The interface extends the basic {@link KeyProvider} interface with additional
 * methods for working with managed keys.
 */
@InterfaceAudience.Public
public interface ManagedKeyProvider extends KeyProvider {
  /**
   * Initialize the provider with the given configuration.
   *
   * @param conf Hadoop configuration
   */
  void initConfig(Configuration conf);

  /**
   * Retrieve the system key using the given system identifier.
   *
   * @param systemId system identifier
   * @return ManagedKeyData for the system key and is guaranteed to be not {@code null}
   * @throws IOException if an error occurs while retrieving the key
   */
  ManagedKeyData getSystemKey(byte[] systemId) throws IOException;

  /**
   * Retrieve a managed key for the specified prefix.
   *
   * @param cust_spec     Custodian specification.
   * @param key_namespace Key namespace
   * @return ManagedKeyData for the system key and is expected to be not {@code null}
   * @throws IOException if an error occurs while retrieving the key
   */
  ManagedKeyData getManagedKey(byte[] cust_spec, String key_namespace) throws IOException;

  /**
   * Retrieve a key identified by the key metadata. The key metadata is typically generated by the
   * same key provider via the {@link #getSystemKey(byte[])} or
   * {@link #getManagedKey(byte[], String)} methods.
   *
   * @param keyMetaData Key metadata
   * @return ManagedKeyData for the key represented by the metadata and is expected to be not
   *   {@code null}
   * @throws IOException if an error occurs while generating the key
   */
  ManagedKeyData unwrapKey(String keyMetaData) throws IOException;

  static byte[] decodeToBytes(String custSpec) throws IOException {
    byte[] cust_spec;
    try {
      cust_spec = Base64.getDecoder().decode(custSpec);
    }
    catch (IllegalArgumentException e) {
      throw new IOException("Failed to decode specified custodian spec as Base64 string: " +
        custSpec, e);
    }
    return cust_spec;
  }

  static String encodeToStr(byte[] cust_spec) {
    return Base64.getEncoder().encodeToString(cust_spec);
  }

}
