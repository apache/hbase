/**
 * Autogenerated by Thrift Compiler (0.14.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.apache.hadoop.hbase.thrift.generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * TAccessControlEntity for permission control
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.14.1)", date = "2021-07-19")
public class TAccessControlEntity implements org.apache.thrift.TBase<TAccessControlEntity, TAccessControlEntity._Fields>, java.io.Serializable, Cloneable, Comparable<TAccessControlEntity> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TAccessControlEntity");

  private static final org.apache.thrift.protocol.TField USERNAME_FIELD_DESC = new org.apache.thrift.protocol.TField("username", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SCOPE_FIELD_DESC = new org.apache.thrift.protocol.TField("scope", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField ACTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("actions", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TABLE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("tableName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField NS_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("nsName", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TAccessControlEntityStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TAccessControlEntityTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String username; // required
  /**
   * 
   * @see TPermissionScope
   */
  public @org.apache.thrift.annotation.Nullable TPermissionScope scope; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String actions; // required
  public @org.apache.thrift.annotation.Nullable java.nio.ByteBuffer tableName; // optional
  public @org.apache.thrift.annotation.Nullable java.lang.String nsName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    USERNAME((short)1, "username"),
    /**
     * 
     * @see TPermissionScope
     */
    SCOPE((short)2, "scope"),
    ACTIONS((short)4, "actions"),
    TABLE_NAME((short)5, "tableName"),
    NS_NAME((short)6, "nsName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USERNAME
          return USERNAME;
        case 2: // SCOPE
          return SCOPE;
        case 4: // ACTIONS
          return ACTIONS;
        case 5: // TABLE_NAME
          return TABLE_NAME;
        case 6: // NS_NAME
          return NS_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TABLE_NAME,_Fields.NS_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USERNAME, new org.apache.thrift.meta_data.FieldMetaData("username", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SCOPE, new org.apache.thrift.meta_data.FieldMetaData("scope", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, TPermissionScope.class)));
    tmpMap.put(_Fields.ACTIONS, new org.apache.thrift.meta_data.FieldMetaData("actions", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TABLE_NAME, new org.apache.thrift.meta_data.FieldMetaData("tableName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Bytes")));
    tmpMap.put(_Fields.NS_NAME, new org.apache.thrift.meta_data.FieldMetaData("nsName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TAccessControlEntity.class, metaDataMap);
  }

  public TAccessControlEntity() {
  }

  public TAccessControlEntity(
    java.lang.String username,
    TPermissionScope scope,
    java.lang.String actions)
  {
    this();
    this.username = username;
    this.scope = scope;
    this.actions = actions;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TAccessControlEntity(TAccessControlEntity other) {
    if (other.isSetUsername()) {
      this.username = other.username;
    }
    if (other.isSetScope()) {
      this.scope = other.scope;
    }
    if (other.isSetActions()) {
      this.actions = other.actions;
    }
    if (other.isSetTableName()) {
      this.tableName = org.apache.thrift.TBaseHelper.copyBinary(other.tableName);
    }
    if (other.isSetNsName()) {
      this.nsName = other.nsName;
    }
  }

  public TAccessControlEntity deepCopy() {
    return new TAccessControlEntity(this);
  }

  @Override
  public void clear() {
    this.username = null;
    this.scope = null;
    this.actions = null;
    this.tableName = null;
    this.nsName = null;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getUsername() {
    return this.username;
  }

  public TAccessControlEntity setUsername(@org.apache.thrift.annotation.Nullable java.lang.String username) {
    this.username = username;
    return this;
  }

  public void unsetUsername() {
    this.username = null;
  }

  /** Returns true if field username is set (has been assigned a value) and false otherwise */
  public boolean isSetUsername() {
    return this.username != null;
  }

  public void setUsernameIsSet(boolean value) {
    if (!value) {
      this.username = null;
    }
  }

  /**
   * 
   * @see TPermissionScope
   */
  @org.apache.thrift.annotation.Nullable
  public TPermissionScope getScope() {
    return this.scope;
  }

  /**
   * 
   * @see TPermissionScope
   */
  public TAccessControlEntity setScope(@org.apache.thrift.annotation.Nullable TPermissionScope scope) {
    this.scope = scope;
    return this;
  }

  public void unsetScope() {
    this.scope = null;
  }

  /** Returns true if field scope is set (has been assigned a value) and false otherwise */
  public boolean isSetScope() {
    return this.scope != null;
  }

  public void setScopeIsSet(boolean value) {
    if (!value) {
      this.scope = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getActions() {
    return this.actions;
  }

  public TAccessControlEntity setActions(@org.apache.thrift.annotation.Nullable java.lang.String actions) {
    this.actions = actions;
    return this;
  }

  public void unsetActions() {
    this.actions = null;
  }

  /** Returns true if field actions is set (has been assigned a value) and false otherwise */
  public boolean isSetActions() {
    return this.actions != null;
  }

  public void setActionsIsSet(boolean value) {
    if (!value) {
      this.actions = null;
    }
  }

  public byte[] getTableName() {
    setTableName(org.apache.thrift.TBaseHelper.rightSize(tableName));
    return tableName == null ? null : tableName.array();
  }

  public java.nio.ByteBuffer bufferForTableName() {
    return org.apache.thrift.TBaseHelper.copyBinary(tableName);
  }

  public TAccessControlEntity setTableName(byte[] tableName) {
    this.tableName = tableName == null ? (java.nio.ByteBuffer)null   : java.nio.ByteBuffer.wrap(tableName.clone());
    return this;
  }

  public TAccessControlEntity setTableName(@org.apache.thrift.annotation.Nullable java.nio.ByteBuffer tableName) {
    this.tableName = org.apache.thrift.TBaseHelper.copyBinary(tableName);
    return this;
  }

  public void unsetTableName() {
    this.tableName = null;
  }

  /** Returns true if field tableName is set (has been assigned a value) and false otherwise */
  public boolean isSetTableName() {
    return this.tableName != null;
  }

  public void setTableNameIsSet(boolean value) {
    if (!value) {
      this.tableName = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getNsName() {
    return this.nsName;
  }

  public TAccessControlEntity setNsName(@org.apache.thrift.annotation.Nullable java.lang.String nsName) {
    this.nsName = nsName;
    return this;
  }

  public void unsetNsName() {
    this.nsName = null;
  }

  /** Returns true if field nsName is set (has been assigned a value) and false otherwise */
  public boolean isSetNsName() {
    return this.nsName != null;
  }

  public void setNsNameIsSet(boolean value) {
    if (!value) {
      this.nsName = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case USERNAME:
      if (value == null) {
        unsetUsername();
      } else {
        setUsername((java.lang.String)value);
      }
      break;

    case SCOPE:
      if (value == null) {
        unsetScope();
      } else {
        setScope((TPermissionScope)value);
      }
      break;

    case ACTIONS:
      if (value == null) {
        unsetActions();
      } else {
        setActions((java.lang.String)value);
      }
      break;

    case TABLE_NAME:
      if (value == null) {
        unsetTableName();
      } else {
        if (value instanceof byte[]) {
          setTableName((byte[])value);
        } else {
          setTableName((java.nio.ByteBuffer)value);
        }
      }
      break;

    case NS_NAME:
      if (value == null) {
        unsetNsName();
      } else {
        setNsName((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USERNAME:
      return getUsername();

    case SCOPE:
      return getScope();

    case ACTIONS:
      return getActions();

    case TABLE_NAME:
      return getTableName();

    case NS_NAME:
      return getNsName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USERNAME:
      return isSetUsername();
    case SCOPE:
      return isSetScope();
    case ACTIONS:
      return isSetActions();
    case TABLE_NAME:
      return isSetTableName();
    case NS_NAME:
      return isSetNsName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof TAccessControlEntity)
      return this.equals((TAccessControlEntity)that);
    return false;
  }

  public boolean equals(TAccessControlEntity that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_username = true && this.isSetUsername();
    boolean that_present_username = true && that.isSetUsername();
    if (this_present_username || that_present_username) {
      if (!(this_present_username && that_present_username))
        return false;
      if (!this.username.equals(that.username))
        return false;
    }

    boolean this_present_scope = true && this.isSetScope();
    boolean that_present_scope = true && that.isSetScope();
    if (this_present_scope || that_present_scope) {
      if (!(this_present_scope && that_present_scope))
        return false;
      if (!this.scope.equals(that.scope))
        return false;
    }

    boolean this_present_actions = true && this.isSetActions();
    boolean that_present_actions = true && that.isSetActions();
    if (this_present_actions || that_present_actions) {
      if (!(this_present_actions && that_present_actions))
        return false;
      if (!this.actions.equals(that.actions))
        return false;
    }

    boolean this_present_tableName = true && this.isSetTableName();
    boolean that_present_tableName = true && that.isSetTableName();
    if (this_present_tableName || that_present_tableName) {
      if (!(this_present_tableName && that_present_tableName))
        return false;
      if (!this.tableName.equals(that.tableName))
        return false;
    }

    boolean this_present_nsName = true && this.isSetNsName();
    boolean that_present_nsName = true && that.isSetNsName();
    if (this_present_nsName || that_present_nsName) {
      if (!(this_present_nsName && that_present_nsName))
        return false;
      if (!this.nsName.equals(that.nsName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUsername()) ? 131071 : 524287);
    if (isSetUsername())
      hashCode = hashCode * 8191 + username.hashCode();

    hashCode = hashCode * 8191 + ((isSetScope()) ? 131071 : 524287);
    if (isSetScope())
      hashCode = hashCode * 8191 + scope.getValue();

    hashCode = hashCode * 8191 + ((isSetActions()) ? 131071 : 524287);
    if (isSetActions())
      hashCode = hashCode * 8191 + actions.hashCode();

    hashCode = hashCode * 8191 + ((isSetTableName()) ? 131071 : 524287);
    if (isSetTableName())
      hashCode = hashCode * 8191 + tableName.hashCode();

    hashCode = hashCode * 8191 + ((isSetNsName()) ? 131071 : 524287);
    if (isSetNsName())
      hashCode = hashCode * 8191 + nsName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(TAccessControlEntity other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetUsername(), other.isSetUsername());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUsername()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.username, other.username);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetScope(), other.isSetScope());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetScope()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.scope, other.scope);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetActions(), other.isSetActions());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetActions()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.actions, other.actions);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetTableName(), other.isSetTableName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTableName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tableName, other.tableName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNsName(), other.isSetNsName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNsName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nsName, other.nsName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TAccessControlEntity(");
    boolean first = true;

    sb.append("username:");
    if (this.username == null) {
      sb.append("null");
    } else {
      sb.append(this.username);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("scope:");
    if (this.scope == null) {
      sb.append("null");
    } else {
      sb.append(this.scope);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("actions:");
    if (this.actions == null) {
      sb.append("null");
    } else {
      sb.append(this.actions);
    }
    first = false;
    if (isSetTableName()) {
      if (!first) sb.append(", ");
      sb.append("tableName:");
      if (this.tableName == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.tableName, sb);
      }
      first = false;
    }
    if (isSetNsName()) {
      if (!first) sb.append(", ");
      sb.append("nsName:");
      if (this.nsName == null) {
        sb.append("null");
      } else {
        sb.append(this.nsName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (username == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'username' was not present! Struct: " + toString());
    }
    if (scope == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'scope' was not present! Struct: " + toString());
    }
    if (actions == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'actions' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TAccessControlEntityStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccessControlEntityStandardScheme getScheme() {
      return new TAccessControlEntityStandardScheme();
    }
  }

  private static class TAccessControlEntityStandardScheme extends org.apache.thrift.scheme.StandardScheme<TAccessControlEntity> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TAccessControlEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USERNAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.username = iprot.readString();
              struct.setUsernameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SCOPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.scope = org.apache.hadoop.hbase.thrift.generated.TPermissionScope.findByValue(iprot.readI32());
              struct.setScopeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ACTIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.actions = iprot.readString();
              struct.setActionsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TABLE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tableName = iprot.readBinary();
              struct.setTableNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NS_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nsName = iprot.readString();
              struct.setNsNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TAccessControlEntity struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.username != null) {
        oprot.writeFieldBegin(USERNAME_FIELD_DESC);
        oprot.writeString(struct.username);
        oprot.writeFieldEnd();
      }
      if (struct.scope != null) {
        oprot.writeFieldBegin(SCOPE_FIELD_DESC);
        oprot.writeI32(struct.scope.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.actions != null) {
        oprot.writeFieldBegin(ACTIONS_FIELD_DESC);
        oprot.writeString(struct.actions);
        oprot.writeFieldEnd();
      }
      if (struct.tableName != null) {
        if (struct.isSetTableName()) {
          oprot.writeFieldBegin(TABLE_NAME_FIELD_DESC);
          oprot.writeBinary(struct.tableName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nsName != null) {
        if (struct.isSetNsName()) {
          oprot.writeFieldBegin(NS_NAME_FIELD_DESC);
          oprot.writeString(struct.nsName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TAccessControlEntityTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TAccessControlEntityTupleScheme getScheme() {
      return new TAccessControlEntityTupleScheme();
    }
  }

  private static class TAccessControlEntityTupleScheme extends org.apache.thrift.scheme.TupleScheme<TAccessControlEntity> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TAccessControlEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.username);
      oprot.writeI32(struct.scope.getValue());
      oprot.writeString(struct.actions);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTableName()) {
        optionals.set(0);
      }
      if (struct.isSetNsName()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetTableName()) {
        oprot.writeBinary(struct.tableName);
      }
      if (struct.isSetNsName()) {
        oprot.writeString(struct.nsName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TAccessControlEntity struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.username = iprot.readString();
      struct.setUsernameIsSet(true);
      struct.scope = org.apache.hadoop.hbase.thrift.generated.TPermissionScope.findByValue(iprot.readI32());
      struct.setScopeIsSet(true);
      struct.actions = iprot.readString();
      struct.setActionsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.tableName = iprot.readBinary();
        struct.setTableNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.nsName = iprot.readString();
        struct.setNsNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

